/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coffee_manage;

import coffee_manage.utils.DatabaseConnection;
import coffee_manage.utils.DateTimeUpdater;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ranz
 */
public class CashierFrame extends javax.swing.JFrame {

    /**
     * Creates new form CashierFrame
     */
    
    private final javax.swing.JLabel lblDateTime;
    
    public CashierFrame() {
        initComponents();
        refreshTable();
        // Add listener to detect changes in tblItems
        DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
        model.addTableModelListener(e -> {
            // Check if the edited column is the Quantity column
            int column = e.getColumn();
            if (column == 3) { // Assuming column 2 is Quantity
                updateRowPrice(e.getFirstRow());
            }
            updateTotalPrice(); // Recalculate total price
        });
        
        lblDateTime = new javax.swing.JLabel();  
        lblDateTime.setBounds(getWidth() - 175, 10, 200, 30); 
        this.add(lblDateTime);  

       
        DateTimeUpdater.startUpdatingDateTime(lblDateTime);
    }
    
     public void refreshTable(){
         //get the product data from the database
        DefaultTableModel model = (DefaultTableModel) tblProduct.getModel();
        model.setRowCount(0); 
        String sql = "SELECT * FROM products";
        try (var conn = DatabaseConnection.getConnection()){
           
            PreparedStatement pst = conn.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            
            
            while(rs.next()){
                model.addRow(new Object[]{rs.getInt(1),rs.getString(2), rs.getInt(3), rs.getDouble(4)});
            }
        }catch(Exception e){
            System.out.println("Error: " + e.getMessage());
                    
        }
    }
     
    private void updateRowPrice(int row) {
        DefaultTableModel model = (DefaultTableModel) tblItems.getModel();

        try {
            int quantity = Integer.parseInt(model.getValueAt(row, 3).toString()); // Column for Quantity
            double price = Double.parseDouble(model.getValueAt(row, 1).toString()); // Column for Price

            double totalPriceForRow = price * quantity; // Calculate total price for row
            model.setValueAt(totalPriceForRow, row, 4); // Update total price in row
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid quantity format!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
}
     
private void updateTotalPrice() {
    DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
    double totalPrice = 0;

    // Loop through all rows in the table
    for (int i = 0; i < model.getRowCount(); i++) {
        totalPrice += (double) model.getValueAt(i, 4); // Column 3 stores the total price for each item
    }

    lblTotalPrice.setText(String.format("%.2f", totalPrice)); // Update the total price label
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtProdID = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lblTotalPrice = new javax.swing.JLabel();
        btnTransaction = new javax.swing.JButton();
        btnAddItem = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblProduct.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tblProduct);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Cashier");

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "hidden", "Name", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Double.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItems.getTableHeader().setReorderingAllowed(false);
        tblItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblItems);
        if (tblItems.getColumnModel().getColumnCount() > 0) {
            tblItems.getColumnModel().getColumn(0).setMinWidth(0);
            tblItems.getColumnModel().getColumn(0).setMaxWidth(0);
            tblItems.getColumnModel().getColumn(1).setMinWidth(0);
            tblItems.getColumnModel().getColumn(1).setMaxWidth(0);
        }

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Product ID");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Quantity");

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Total Price");

        lblTotalPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTotalPrice.setText("0.00");

        btnTransaction.setText("Complete Transaction");
        btnTransaction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTransactionMouseClicked(evt);
            }
        });

        btnAddItem.setText("Add");
        btnAddItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddItemMouseClicked(evt);
            }
        });

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLogout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(177, 177, 177))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblTotalPrice))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtProdID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                        .addComponent(txtQuantity, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(btnAddItem, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(btnLogout))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(lblTotalPrice))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtProdID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTransaction))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsMouseClicked
        if (evt.getClickCount() == 2) {
            int selectedRow = tblItems.getSelectedRow();

            if (selectedRow >= 0) {
                // Confirm deletion
                int confirmation = JOptionPane.showConfirmDialog(
                    tblItems,
                    "Are you sure you want to delete this item?",
                    "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION
                );

                if (confirmation == JOptionPane.YES_OPTION) {
                    // Remove the selected row from the table
                    DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
                    model.removeRow(selectedRow);

                    // Update the total price
                    updateTotalPrice();

                    JOptionPane.showMessageDialog(tblItems, "Item deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(tblItems, "No row selected!", "Error", JOptionPane.ERROR_MESSAGE);
            }
         }
    }//GEN-LAST:event_tblItemsMouseClicked

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void btnAddItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddItemMouseClicked
         try {
            String prodID = txtProdID.getText();
            String quantityText = txtQuantity.getText();

            // Validate input
            if (prodID.isEmpty() || quantityText.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please fill in both Product ID and Quantity.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int quantity = Integer.parseInt(quantityText);
            
            DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                if (prodID.equals(model.getValueAt(i, 0).toString())) { // Assuming column 0 is the Product ID
                    JOptionPane.showMessageDialog(this, "Product already added!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            // Fetch product details from the database
            java.sql.Connection conn = DatabaseConnection.getConnection();
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM products WHERE id = ?");
            ps.setString(1, prodID);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("product_name");
                double price = rs.getDouble("product_price");

                // Calculate the total price for the selected quantity
                double totalPriceForItem = price * quantity;

                // Add row to the table
                model.addRow(new Object[]{id ,price, name, quantity, totalPriceForItem});

                // Update the total price label
                updateTotalPrice();

            } else {
                JOptionPane.showMessageDialog(this, "Product not found!", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Close resources
            rs.close();
            ps.close();
            conn.close();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Quantity must be a number!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddItemMouseClicked

    private void btnTransactionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTransactionMouseClicked
         try {
            // Check if there are items in the transaction table
            DefaultTableModel model = (DefaultTableModel) tblItems.getModel();
            if (model.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "No items to complete the transaction!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Connect to the database
            java.sql.Connection conn = DatabaseConnection.getConnection();
            conn.setAutoCommit(false); // Enable transaction management

            // Save the transaction in the database
            String transactionSql = "INSERT INTO transactions (total_price, transaction_date) VALUES (?, NOW())";
            PreparedStatement transactionStmt = conn.prepareStatement(transactionSql, PreparedStatement.RETURN_GENERATED_KEYS);
            double totalPrice = Double.parseDouble(lblTotalPrice.getText());
            transactionStmt.setDouble(1, totalPrice);
            transactionStmt.executeUpdate();

            // Get the transaction ID for inserting transaction items
            ResultSet rs = transactionStmt.getGeneratedKeys();
            if (!rs.next()) {
                throw new Exception("Failed to retrieve transaction ID.");
            }
            int transactionId = rs.getInt(1);

            // Insert each item into the transaction_items table and update the product inventory
            String itemSql = "INSERT INTO transaction_items (transaction_id, product_id, quantity, total_price) VALUES (?, ?, ?, ?)";
            String updateProductSql = "UPDATE products SET product_quantity = product_quantity - ? WHERE id = ?";
            PreparedStatement itemStmt = conn.prepareStatement(itemSql);
            PreparedStatement updateProductStmt = conn.prepareStatement(updateProductSql);

            for (int i = 0; i < model.getRowCount(); i++) {
                int productId = (int) model.getValueAt(i, 0); // Product ID
                int quantity = (int) model.getValueAt(i, 3); // Quantity
                double rowTotalPrice = (double) model.getValueAt(i, 4); // Total Price

                // Insert item into transaction_items
                itemStmt.setInt(1, transactionId);
                itemStmt.setInt(2, productId);
                itemStmt.setInt(3, quantity);
                itemStmt.setDouble(4, rowTotalPrice);
                itemStmt.addBatch();

                // Update product inventory
                updateProductStmt.setInt(1, quantity);
                updateProductStmt.setInt(2, productId);
                updateProductStmt.addBatch();
            }

            itemStmt.executeBatch();
            updateProductStmt.executeBatch();
            conn.commit(); // Commit the transaction

            // Clear the table and reset the total price label
            model.setRowCount(0);
            lblTotalPrice.setText("0.00");
            

            JOptionPane.showMessageDialog(this, "Transaction completed successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Refresh product table to reflect inventory changes
            refreshTable();

        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Transaction Error", JOptionPane.ERROR_MESSAGE);

            try {
                DatabaseConnection.getConnection().rollback(); // Roll back the transaction on error
            } catch (Exception rollbackEx) {
                rollbackEx.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnTransactionMouseClicked

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        int currentX = this.getX();
        int currentY = this.getY();
        Login loginFrame = new Login();
        loginFrame.setLocation(currentX, currentY);
        loginFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CashierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CashierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CashierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CashierFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CashierFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnTransaction;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JTable tblItems;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTextField txtProdID;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
